package com.liuwen;

/**
 * ----------------------------------------------------------------------
 * 软件设计模式
 *
 * @author Create by liu wen at 2021.4.13 9:42
 * <p>
 * ----------------------------------------------------------------------
 */
public class 软件设计模式的概念 {
    public static void main(String[] args) {
        System.out.println("欢迎!开启软件设计模式之旅!");
        System.out.println("软件设计模式的概念:");
        System.out.println("软件设计模式（Software Design " +
                "Pattern" +
                "），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。\n" +
                "它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。\n" +
                "也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。\n" +
                "其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。");
        System.out.println("设计模式的本质:");
        System.out.println("是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。");
        System.out.println("软件设计模式的意义:");
        System.out.println("可以提高程序员的思维能力、编程能力和设计能力。\n" +
                "使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n" +
                "使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。");
        System.out.println("软件设计模式的基本要素:");
        System.out.println("1.模式名称;2.问题;3.解决方案;4.效果");

        System.out.println("软件设计模式一般分类如下:");
        System.out.println("创建型模式(5种):单例、原型、工厂方法、抽象工厂、建造者");
        System.out.println("结构型模式(7种):代理、适配器、桥接、装饰、外观、享元、组合");
        System.out.println("行为型模式(11种):模板、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器");

    }
}
